// Keyball44 ZMK Configuration
// Layer definitions
#define DEFAULT 0
#define SYM     1
#define NUM     2
#define LOCK    3

// Includes
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Global behavior overrides
&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { 
    continue-list = <UNDERSCORE MINUS>; 
};

/ {
    behaviors {
    // ===== PRIMARY BEHAVIORS =====
        
        // NUM layer with 5-second timeout and smart deactivation
        Auto_Num: Auto_Num {
            compatible = "zmk,behavior-auto-layer";
            label = "AUTO_NUM";
            #binding-cells = <1>;
            continue-list = <NUMBER_1 NUMBER_2 NUMBER_3 NUMBER_4 NUMBER_5 NUMBER_6 NUMBER_7 NUMBER_8 NUMBER_9 NUMBER_0 PLUS MINUS STAR EQUAL DOT COMMA>;
            timeout-ms = <5000>; // 5 seconds
        };

        // Main ESC key behavior:
        // - Tap = ESC (normal function)
        // - Hold + release = NUM layer with auto-timeout and timer reset on number presses
        // - Double tap = LOCK layer
        ht_main: ht_main {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MAIN";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&to>, <&td_esc_lock>;
        }; 

        // Single tap = ESC, Double tap = LOCK
        td_esc_lock: td_esc_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ESC_LOCK";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&to LOCK>;
            tapping-term-ms = <200>;
        };

        // Double-tap to unlock from sleep/travel mode
        td_double_unlock: td_double_unlock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOUBLE_UNLOCK";
            #binding-cells = <0>;
            bindings = <&none>, <&macro_unlock_to_default>;
            tapping-term-ms = <400>;
        };

    // ===== LAYER TOGGLES =====
        
        // Control with SYM layer toggle
        td_ctrl_sym: td_ctrl_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CTRL_SYM";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL>, <&tog SYM>;
            tapping-term-ms = <200>;
        };

        // Unlock from sleep and return to default layer
        macro_unlock_to_default: macro_unlock_to_default {
            compatible = "zmk,behavior-macro";
            label = "MACRO_UNLOCK_DEFAULT";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp ESCAPE>;
        };

    // ===== UTILITY TAP DANCES =====
        
        // GUI with Print Screen
        td_gui_prnscrn: td_gui_prnscrn {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GUI_PRNSCRN";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp PRINTSCREEN>;
            tapping-term-ms = <200>;
        };

        // Backspace with Delete (hold for delete)
        td_bs_del: td_bs_del {
            compatible = "zmk,behavior-hold-tap";
            label = "TD_BS_DEL";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        // Space with punctuation macros
        td_space_macro: td_space_macro {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SPACE_MACRO";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&macro_dot_space>, <&macro_comma_space>;
            tapping-term-ms = <200>;
        };

        // Custom sticky shift with short timeout for dot space
        sk_short: sk_short {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_SHORT";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;  // Auto-release after 2 seconds
            quick-release;  // Release immediately after next key
        };

    // ===== MACROS =====
        
        // Comma + Space
        macro_comma_space: macro_comma_space {
            compatible = "zmk,behavior-macro";
            label = "MACRO_COMMA_SPACE";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
        };

        // Dot + Space + Sticky Shift for next character
        macro_dot_space: macro_dot_space {
            compatible = "zmk,behavior-macro";
            label = "MACRO_DOT_SPACE";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk_short LEFT_SHIFT>;
        }; 

    };
    
    // ===== KEYMAP =====
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
               &ht_main NUM 0  &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y  &kp U  &kp I  &kp O  &kp P  &mt EQUAL MINUS
               &kp LEFT_SHIFT  &kp A  &kp S  &kp D  &kp F  &kp G        &kp H  &kp J  &kp K  &kp L  &kp SEMI  &mt GRAVE SQT
               &td_ctrl_sym    &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &td_gui_prnscrn
               &kp TAB         &kp LALT  &kp LEFT_BRACKET  &td_space_macro  &kp RIGHT_BRACKET    &kp RET  &kp SPACE    &td_bs_del DELETE BACKSPACE

               &kp DOWN  &kp LEFT  &kp RIGHT  &kp UP
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
               &none  &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &kp LEFT_SHIFT  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none    &none  &none  &none  &none  &none  &none
               &td_ctrl_sym    &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &td_gui_prnscrn
               &kp TAB         &kp LALT  &bt BT_PRV  &bt BT_CLR  &bt BT_NXT    &none  &none    &none

               &none  &none  &none  &none
            >;
        };

        function_layer {
            label = "NUM";
            bindings = <
               &Auto_Num NUM  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &mt EQUAL MINUS
               &kp LEFT_SHIFT  &kp A  &kp S  &kp D  &kp F  &kp G        &kp H  &kp J  &kp K  &kp L  &kp SEMI  &mt GRAVE SQT
               &td_ctrl_sym    &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &td_gui_prnscrn
               &kp TAB         &kp LALT  &kp LEFT_BRACKET  &td_space_macro  &kp RIGHT_BRACKET    &kp RET  &kp SPACE    &td_bs_del DELETE BACKSPACE

               &kp C_VOL_DN  &kp C_PREV  &kp C_NEXT  &kp C_VOL_UP
            >;
        };
        
        sleep_layer {
            label = "LOCK";
            bindings = <
               &td_double_unlock  &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &none             &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &none             &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &none             &none  &none  &none  &none    &none  &none    &none
               
               &none  &none  &none  &none
            >;
        };
    };
};

// Enhanced scroll behavior configuration
&msc {
    time-to-max-speed-ms = <300>;   // How quickly to reach max scroll speed
    acceleration-exponent = <2>;    // Higher = more aggressive acceleration
};
