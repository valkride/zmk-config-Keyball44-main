// Keyball44 ZMK Configuration
// Layer definitions
#define DEFAULT 0
#define SYM     1
#define NUM     2
#define LOCK    3

// Includes
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Global behavior overrides
&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { 
    continue-list = <UNDERSCORE MINUS>; 
};

/ {
    behaviors {
    // ===== PRIMARY BEHAVIORS =====
        
        // NUM layer auto-layer behavior - stays active on number keys
        Auto_Num: Auto_Num {
            compatible = "zmk,behavior-auto-layer";
            label = "AUTO_NUM";
            #binding-cells = <1>;
            continue-list = <PLUS MINUS STAR EQUAL COMMA DOT FSLH BSLH PIPE UNDER PERCENT HASH AT EXCL QMARK COLON SEMI LPAR RPAR LBKT RBKT LBRC RBRC LT GT AMPS CARET TILDE GRAVE DLLR SPACE BSPC DEL>;
            timeout-ms = <5000>; // 5 seconds when idle
        };

        // Number key macros that reset the auto-layer timer
        num0: num0 {
            compatible = "zmk,behavior-macro";
            label = "NUM0";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_0>, <&Auto_Num NUM>;
        };

        num1: num1 {
            compatible = "zmk,behavior-macro";
            label = "NUM1";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_1>, <&Auto_Num NUM>;
        };

        num2: num2 {
            compatible = "zmk,behavior-macro";
            label = "NUM2";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2>, <&Auto_Num NUM>;
        };

        num3: num3 {
            compatible = "zmk,behavior-macro";
            label = "NUM3";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_3>, <&Auto_Num NUM>;
        };

        num4: num4 {
            compatible = "zmk,behavior-macro";
            label = "NUM4";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_4>, <&Auto_Num NUM>;
        };

        num5: num5 {
            compatible = "zmk,behavior-macro";
            label = "NUM5";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_5>, <&Auto_Num NUM>;
        };

        num6: num6 {
            compatible = "zmk,behavior-macro";
            label = "NUM6";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_6>, <&Auto_Num NUM>;
        };

        num7: num7 {
            compatible = "zmk,behavior-macro";
            label = "NUM7";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_7>, <&Auto_Num NUM>;
        };

        num8: num8 {
            compatible = "zmk,behavior-macro";
            label = "NUM8";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_8>, <&Auto_Num NUM>;
        };

        num9: num9 {
            compatible = "zmk,behavior-macro";
            label = "NUM9";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_9>, <&Auto_Num NUM>;
        };

        // Main ESC key behavior:
        // - Tap = ESC (normal function)  
        // - Hold + release = NUM layer with auto-layer behavior
        // - Double tap = LOCK layer
        ht_main: ht_main {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MAIN";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&Auto_Num>, <&td_esc_lock>;
        }; 

        // Single tap = ESC, Double tap = LOCK
        td_esc_lock: td_esc_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ESC_LOCK";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&to LOCK>;
            tapping-term-ms = <200>;
        };

        // Double-tap to unlock from sleep/travel mode
        td_double_unlock: td_double_unlock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOUBLE_UNLOCK";
            #binding-cells = <0>;
            bindings = <&none>, <&macro_unlock_to_default>;
            tapping-term-ms = <400>;
        };

    // ===== LAYER TOGGLES =====
        
        // Control with SYM layer toggle
        td_ctrl_sym: td_ctrl_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CTRL_SYM";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL>, <&tog SYM>;
            tapping-term-ms = <200>;
        };

        // Unlock from sleep and return to default layer
        macro_unlock_to_default: macro_unlock_to_default {
            compatible = "zmk,behavior-macro";
            label = "MACRO_UNLOCK_DEFAULT";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp ESCAPE>;
        };

    // ===== UTILITY TAP DANCES =====
        
        // GUI with Print Screen
        td_gui_prnscrn: td_gui_prnscrn {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GUI_PRNSCRN";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp PRINTSCREEN>;
            tapping-term-ms = <200>;
        };

        // Backspace with Delete (hold for delete)
        td_bs_del: td_bs_del {
            compatible = "zmk,behavior-hold-tap";
            label = "TD_BS_DEL";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        // Space with punctuation macros
        td_space_macro: td_space_macro {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SPACE_MACRO";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&macro_dot_space>, <&macro_comma_space>;
            tapping-term-ms = <200>;
        };

        // Custom sticky shift with short timeout for dot space
        sk_short: sk_short {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_SHORT";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;  // Auto-release after 2 seconds
            quick-release;  // Release immediately after next key
        };

    // ===== MACROS =====
        
        // Comma + Space
        macro_comma_space: macro_comma_space {
            compatible = "zmk,behavior-macro";
            label = "MACRO_COMMA_SPACE";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
        };

        // Dot + Space + Sticky Shift for next character
        macro_dot_space: macro_dot_space {
            compatible = "zmk,behavior-macro";
            label = "MACRO_DOT_SPACE";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk_short LEFT_SHIFT>;
        }; 

    };
    
    // ===== KEYMAP =====
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
               &ht_main NUM 0  &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y  &kp U  &kp I  &kp O  &kp P  &mt EQUAL MINUS
               &kp LEFT_SHIFT  &kp A  &kp S  &kp D  &kp F  &kp G        &kp H  &kp J  &kp K  &kp L  &kp SEMI  &mt GRAVE SQT
               &td_ctrl_sym    &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &td_gui_prnscrn
               &kp TAB         &kp LALT  &kp LEFT_BRACKET  &td_space_macro  &kp RIGHT_BRACKET    &kp RET  &kp SPACE    &td_bs_del DELETE BACKSPACE

               &kp DOWN  &kp LEFT  &kp RIGHT  &kp UP
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
               &none  &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &kp LEFT_SHIFT  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none    &none  &none  &none  &none  &none  &none
               &td_ctrl_sym    &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &td_gui_prnscrn
               &kp TAB         &kp LALT  &bt BT_PRV  &bt BT_CLR  &bt BT_NXT    &none  &none    &none

               &none  &none  &none  &none
            >;
        };

        function_layer {
            label = "NUM";
            bindings = <
               &ht_main NUM 0  &num1  &num2  &num3  &num4  &num5    &num6  &num7  &num8  &num9  &num0  &mt EQUAL MINUS
               &kp LEFT_SHIFT  &kp A  &kp S  &kp D  &kp F  &kp G        &kp H  &kp J  &kp K  &kp L  &kp SEMI  &mt GRAVE SQT
               &td_ctrl_sym    &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &td_gui_prnscrn
               &kp TAB         &kp LALT  &kp LEFT_BRACKET  &td_space_macro  &kp RIGHT_BRACKET    &kp RET  &kp SPACE    &td_bs_del DELETE BACKSPACE

               &kp C_VOL_DN  &kp C_PREV  &kp C_NEXT  &kp C_VOL_UP
            >;
        };
        
        sleep_layer {
            label = "LOCK";
            bindings = <
               &td_double_unlock  &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &none             &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &none             &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &none             &none  &none  &none  &none    &none  &none    &none
               
               &none  &none  &none  &none
            >;
        };
    };
};

// Enhanced scroll behavior configuration
&msc {
    time-to-max-speed-ms = <300>;   // How quickly to reach max scroll speed
    acceleration-exponent = <2>;    // Higher = more aggressive acceleration
};
