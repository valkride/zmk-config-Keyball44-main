// Keyball44 ZMK Configuration
// Layer definitions
#define DEFAULT 0
#define SYM     1
#define NUM     2
#define LOCK    3

// Includes
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Global behavior overrides
&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&sl {
    release-after-ms = <10000>;  // 10 seconds
};

&caps_word { 
    continue-list = <UNDERSCORE MINUS>; 
};

/ {
    behaviors {
    // ===== PRIMARY BEHAVIORS =====
        
        // Main ESC key behavior:
        // - Single press = ESC
        // - Hold = Sticky NUM layer for 10 seconds
        // - Double tap = LOCK layer
        ht_main: ht_main {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MAIN";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&sl>, <&td_esc_lock>;
        }; 

        // Single tap = ESC, Double tap = LOCK
        td_esc_lock: td_esc_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ESC_LOCK";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&to LOCK>;
            tapping-term-ms = <200>;
        };

        // Double-tap to unlock from sleep/travel mode
        td_double_unlock: td_double_unlock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOUBLE_UNLOCK";
            #binding-cells = <0>;
            bindings = <&none>, <&macro_unlock_to_default>;
            tapping-term-ms = <400>;
        };

    // ===== LAYER TOGGLES =====
        
        // Control with SYM layer toggle
        td_ctrl_sym: td_ctrl_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CTRL_SYM";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL>, <&tog SYM>;
            tapping-term-ms = <200>;
        };

        // Unlock from sleep and return to default layer
        macro_unlock_to_default: macro_unlock_to_default {
            compatible = "zmk,behavior-macro";
            label = "MACRO_UNLOCK_DEFAULT";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp ESCAPE>;
        };

    // ===== UTILITY TAP DANCES =====
        
        // GUI with Print Screen
        td_gui_prnscrn: td_gui_prnscrn {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GUI_PRNSCRN";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp PRINTSCREEN>;
            tapping-term-ms = <200>;
        };

        // Backspace with Delete
        td_bs_del: td_bs_del {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BS_DEL";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            tapping-term-ms = <200>;
        };

        // Space with punctuation macros
        td_space_macro: td_space_macro {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SPACE_MACRO";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&macro_dot_space>, <&macro_comma_space>;
            tapping-term-ms = <200>;
        };

        // Custom sticky shift with short timeout for dot space
        sk_short: sk_short {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_SHORT";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;  // Auto-release after 2 seconds
            quick-release;  // Release immediately after next key
        };

    // ===== MACROS =====
        
        // Comma + Space
        macro_comma_space: macro_comma_space {
            compatible = "zmk,behavior-macro";
            label = "MACRO_COMMA_SPACE";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
        };

        // Dot + Space + Sticky Shift for next character
        macro_dot_space: macro_dot_space {
            compatible = "zmk,behavior-macro";
            label = "MACRO_DOT_SPACE";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk_short LEFT_SHIFT>;
        }; 

        // Smart keys that exit NUM layer when pressed (for non-top-row keys)
        smart_q: smart_q {
            compatible = "zmk,behavior-macro";
            label = "SMART_Q";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp Q>;
        };

        smart_w: smart_w {
            compatible = "zmk,behavior-macro";
            label = "SMART_W";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp W>;
        };

        smart_e: smart_e {
            compatible = "zmk,behavior-macro";
            label = "SMART_E";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp E>;
        };

        smart_r: smart_r {
            compatible = "zmk,behavior-macro";
            label = "SMART_R";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp R>;
        };

        smart_t: smart_t {
            compatible = "zmk,behavior-macro";
            label = "SMART_T";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp T>;
        };

        smart_y: smart_y {
            compatible = "zmk,behavior-macro";
            label = "SMART_Y";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp Y>;
        };

        smart_u: smart_u {
            compatible = "zmk,behavior-macro";
            label = "SMART_U";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp U>;
        };

        smart_i: smart_i {
            compatible = "zmk,behavior-macro";
            label = "SMART_I";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp I>;
        };

        smart_o: smart_o {
            compatible = "zmk,behavior-macro";
            label = "SMART_O";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp O>;
        };

        smart_p: smart_p {
            compatible = "zmk,behavior-macro";
            label = "SMART_P";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp P>;
        };

        smart_a: smart_a {
            compatible = "zmk,behavior-macro";
            label = "SMART_A";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp A>;
        };

        smart_s: smart_s {
            compatible = "zmk,behavior-macro";
            label = "SMART_S";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp S>;
        };

        smart_d: smart_d {
            compatible = "zmk,behavior-macro";
            label = "SMART_D";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp D>;
        };

        smart_f: smart_f {
            compatible = "zmk,behavior-macro";
            label = "SMART_F";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp F>;
        };

        smart_g: smart_g {
            compatible = "zmk,behavior-macro";
            label = "SMART_G";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp G>;
        };

        smart_h: smart_h {
            compatible = "zmk,behavior-macro";
            label = "SMART_H";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp H>;
        };

        smart_j: smart_j {
            compatible = "zmk,behavior-macro";
            label = "SMART_J";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp J>;
        };

        smart_k: smart_k {
            compatible = "zmk,behavior-macro";
            label = "SMART_K";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp K>;
        };

        smart_l: smart_l {
            compatible = "zmk,behavior-macro";
            label = "SMART_L";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp L>;
        };

        smart_z: smart_z {
            compatible = "zmk,behavior-macro";
            label = "SMART_Z";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp Z>;
        };

        smart_x: smart_x {
            compatible = "zmk,behavior-macro";
            label = "SMART_X";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp X>;
        };

        smart_c: smart_c {
            compatible = "zmk,behavior-macro";
            label = "SMART_C";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp C>;
        };

        smart_v: smart_v {
            compatible = "zmk,behavior-macro";
            label = "SMART_V";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp V>;
        };

        smart_b: smart_b {
            compatible = "zmk,behavior-macro";
            label = "SMART_B";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp B>;
        };

        smart_n: smart_n {
            compatible = "zmk,behavior-macro";
            label = "SMART_N";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp N>;
        };

        smart_m: smart_m {
            compatible = "zmk,behavior-macro";
            label = "SMART_M";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp M>;
        };

        smart_ret: smart_ret {
            compatible = "zmk,behavior-macro";
            label = "SMART_RET";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp RET>;
        };

        smart_space: smart_space {
            compatible = "zmk,behavior-macro";
            label = "SMART_SPACE";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp SPACE>;
        };

        smart_tab: smart_tab {
            compatible = "zmk,behavior-macro";
            label = "SMART_TAB";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp TAB>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-macro";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp LEFT_SHIFT>;
        };

        smart_ctrl: smart_ctrl {
            compatible = "zmk,behavior-macro";
            label = "SMART_CTRL";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp LEFT_CONTROL>;
        };

        smart_alt: smart_alt {
            compatible = "zmk,behavior-macro";
            label = "SMART_ALT";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp LALT>;
        };

        smart_comma: smart_comma {
            compatible = "zmk,behavior-macro";
            label = "SMART_COMMA";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp COMMA>;
        };

        smart_dot: smart_dot {
            compatible = "zmk,behavior-macro";
            label = "SMART_DOT";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp DOT>;
        };

        smart_slash: smart_slash {
            compatible = "zmk,behavior-macro";
            label = "SMART_SLASH";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp SLASH>;
        };

        smart_semi: smart_semi {
            compatible = "zmk,behavior-macro";
            label = "SMART_SEMI";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp SEMI>;
        };

        smart_left_bracket: smart_left_bracket {
            compatible = "zmk,behavior-macro";
            label = "SMART_LEFT_BRACKET";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp LEFT_BRACKET>;
        };

        smart_right_bracket: smart_right_bracket {
            compatible = "zmk,behavior-macro";
            label = "SMART_RIGHT_BRACKET";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp RIGHT_BRACKET>;
        };

        smart_down: smart_down {
            compatible = "zmk,behavior-macro";
            label = "SMART_DOWN";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp DOWN>;
        };

        smart_left: smart_left {
            compatible = "zmk,behavior-macro";
            label = "SMART_LEFT";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp LEFT>;
        };

        smart_right: smart_right {
            compatible = "zmk,behavior-macro";
            label = "SMART_RIGHT";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp RIGHT>;
        };

        smart_up: smart_up {
            compatible = "zmk,behavior-macro";
            label = "SMART_UP";
            #binding-cells = <0>;
            bindings = <&to DEFAULT &kp UP>;
        };

        // Smart behaviors for complex behaviors
        smart_td_ctrl_sym: smart_td_ctrl_sym {
            compatible = "zmk,behavior-macro";
            label = "SMART_TD_CTRL_SYM";
            #binding-cells = <0>;
            bindings = <&to DEFAULT>, <&td_ctrl_sym>;
        };

        smart_td_gui_prnscrn: smart_td_gui_prnscrn {
            compatible = "zmk,behavior-macro";
            label = "SMART_TD_GUI_PRNSCRN";
            #binding-cells = <0>;
            bindings = <&to DEFAULT>, <&td_gui_prnscrn>;
        };

        smart_td_bs_del: smart_td_bs_del {
            compatible = "zmk,behavior-macro";
            label = "SMART_TD_BS_DEL";
            #binding-cells = <0>;
            bindings = <&to DEFAULT>, <&td_bs_del>;
        };

        smart_td_space_macro: smart_td_space_macro {
            compatible = "zmk,behavior-macro";
            label = "SMART_TD_SPACE_MACRO";
            #binding-cells = <0>;
            bindings = <&to DEFAULT>, <&td_space_macro>;
        };

        smart_mt_equal_minus: smart_mt_equal_minus {
            compatible = "zmk,behavior-macro";
            label = "SMART_MT_EQUAL_MINUS";
            #binding-cells = <0>;
            bindings = <&to DEFAULT>, <&mt EQUAL MINUS>;
        };

        smart_mt_grave_sqt: smart_mt_grave_sqt {
            compatible = "zmk,behavior-macro";
            label = "SMART_MT_GRAVE_SQT";
            #binding-cells = <0>;
            bindings = <&to DEFAULT>, <&mt GRAVE SQT>;
        };

    };
    // ===== KEYMAP =====
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
               &ht_main NUM 0  &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y  &kp U  &kp I  &kp O  &kp P  &mt EQUAL MINUS
               &kp LEFT_SHIFT  &kp A  &kp S  &kp D  &kp F  &kp G        &kp H  &kp J  &kp K  &kp L  &kp SEMI  &mt GRAVE SQT
               &td_ctrl_sym    &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &td_gui_prnscrn
               &kp TAB         &kp LALT  &kp LEFT_BRACKET  &td_space_macro  &kp RIGHT_BRACKET    &kp RET  &kp SPACE    &td_bs_del

               &kp DOWN  &kp LEFT  &kp RIGHT  &kp UP
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
               &ht_main NUM 0  &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &kp LEFT_SHIFT  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none    &none  &none  &none  &none  &none  &none
               &td_ctrl_sym    &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &td_gui_prnscrn
               &kp TAB         &kp LALT  &bt BT_PRV  &bt BT_CLR  &bt BT_NXT    &none  &none    &none

               &none  &none  &none  &none
            >;
        };

        function_layer {
            label = "NUM";
            bindings = <
               &ht_main NUM 0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &smart_mt_equal_minus
               &smart_shift  &smart_a  &smart_s  &smart_d  &smart_f  &smart_g        &smart_h  &smart_j  &smart_k  &smart_l  &smart_semi  &smart_mt_grave_sqt
               &smart_td_ctrl_sym    &smart_z  &smart_x  &smart_c  &smart_v  &smart_b        &smart_n  &smart_m  &smart_comma  &smart_dot  &smart_slash  &smart_td_gui_prnscrn
               &smart_tab         &smart_alt  &smart_left_bracket  &smart_td_space_macro  &smart_right_bracket    &smart_ret  &smart_space    &smart_td_bs_del

               &smart_down  &smart_left  &smart_right  &smart_up
            >;
        };        sleep_layer {
            label = "LOCK";
            bindings = <
               &td_double_unlock  &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &none             &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &none             &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  &none
               &none             &none  &none  &none  &none    &none  &none    &none
               
               &none  &none  &none  &none
            >;
        };
    };
};

// Enhanced scroll behavior configuration
&msc {
    time-to-max-speed-ms = <300>;   // How quickly to reach max scroll speed
    acceleration-exponent = <2>;    // Higher = more aggressive acceleration
};
